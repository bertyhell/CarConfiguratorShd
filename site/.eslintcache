[{"C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\site\\src\\index.tsx":"1","C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\site\\src\\App.tsx":"2","C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\Site\\src\\index.tsx":"3","C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\Site\\src\\App.tsx":"4"},{"size":437,"mtime":1609962278711,"results":"5","hashOfConfig":"6"},{"size":5093,"mtime":1609964957614,"results":"7","hashOfConfig":"6"},{"size":437,"mtime":1609962278711,"results":"8","hashOfConfig":"9"},{"size":5368,"mtime":1610120507565,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1fr9kli",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1yrdock",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\site\\src\\index.tsx",[],["23","24"],"C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\site\\src\\App.tsx",["25"],"import React, { ReactNode, useCallback, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport Unity, { UnityContext } from 'react-unity-webgl';\n\nimport ElantraF from './assets/car/ElantraF.png';\nimport TwoCv from './assets/car/2Cv.png';\n\nimport OldStyle from './assets/rim/OldStyle.png';\nimport FiveSpiked from './assets/rim/FiveSpiked.png';\n\nimport CarPaintRed from './assets/paint/CarPaintRed.png';\nimport CarPaintBlack from './assets/paint/CarPaintBlack.png';\nimport CarPaintBlue from './assets/paint/CarPaintBlue.png';\nimport CarPaintPaleGreen from './assets/paint/CarPaintPaleGreen.png';\n\nimport './App.css';\nimport { StringParam, useQueryParam } from 'use-query-params';\n\ninterface OptionInfo {\n\tvalue: string;\n\timage: string;\n}\n\ntype Tab = 'car' | 'rim' | 'paint';\n\nconst CONFIGURATION_OPTIONS: Record<Tab, OptionInfo[]> = {\n\tcar: [\n\t\t{ value: 'ElantraF', image: ElantraF },\n\t\t{ value: '2Cv', image: TwoCv }\n\t],\n\trim: [\n\t\t{ value: 'OldStyle', image: OldStyle },\n\t\t{ value: 'FiveSpiked', image: FiveSpiked }\n\t],\n\tpaint: [\n\t\t{ value: 'CarPaintRed', image: CarPaintRed },\n\t\t{ value: 'CarPaintBlack', image: CarPaintBlack },\n\t\t{ value: 'CarPaintBlue', image: CarPaintBlue },\n\t\t{ value: 'CarPaintPaleGreen', image: CarPaintPaleGreen },\n\t],\n};\n\nfunction App() {\n\tconst [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n\tconst [activeTab, setActiveTab] = useState<Tab>('car');\n\tconst [lastAction, setLastAction] = useState<Tab | null>(null);\n\tconst [lastActionValue, setLastActionValue] = useState<string | null>(null);\n\tconst [unityContext, setUnityContext] = useState<UnityContext | null>(null);\n\n\t// Save car configuration to url\n\tconst [car, setCar] = useQueryParam('car', StringParam);\n\tconst [rim, setRim] = useQueryParam('rim', StringParam);\n\tconst [paint, setPaint] = useQueryParam('paint', StringParam);\n\n\tconst toggleMenu = () => {\n\t\tsetIsCollapsed((collapsed) => !collapsed);\n\t};\n\n\tconst changeConfiguration = useCallback((action: Tab, value: string) => {\n\t\tsetLastAction(action);\n\t\tsetLastActionValue(value);\n\n\t\tswitch (action) {\n\t\t\tcase 'car':\n\t\t\t\tsetCar(value);\n\t\t\t\tbreak;\n\n\t\t\tcase 'rim':\n\t\t\t\tsetRim(value);\n\t\t\t\tbreak;\n\n\t\t\tcase 'paint':\n\t\t\t\tsetPaint(value);\n\t\t\t\tbreak;\n\t\t}\n\t}, [setLastAction, setLastActionValue, setCar, setRim, setPaint]);\n\n\tconst sendResolutionToUnity = useCallback(() => {\n\t\tif (!unityContext) {\n\t\t\treturn;\n\t\t}\n\t\tunityContext.send(\n\t\t\t'CameraTarget',\n\t\t\t'SetResolution',\n\t\t\t`${window.innerWidth}:${window.innerHeight}`);\n\t}, [unityContext]);\n\n\t// Run once at startup\n\tuseEffect(() => {\n\t\t// Init unity\n\t\tconst context = new UnityContext({\n\t\t\tloaderUrl: \"game/Build/game.loader.js\",\n\t\t\tdataUrl: \"game/Build/game.data\",\n\t\t\tframeworkUrl: \"game/Build/game.framework.js\",\n\t\t\tcodeUrl: \"game/Build/game.wasm\",\n\t\t});\n\n\t\tcontext.on(\"loaded\", () => {\n\t\t\tif (car) {\n\t\t\t\tchangeConfiguration('car', car);\n\t\t\t}\n\t\t\tif (rim) {\n\t\t\t\tchangeConfiguration('rim', rim);\n\t\t\t}\n\t\t\tif (paint) {\n\t\t\t\tchangeConfiguration('paint', paint);\n\t\t\t}\n\t\t});\n\n\t\tsetUnityContext(context);\n\n\t\t// Pass browser window size to unity to normalize mouse movement\n\t\twindow.addEventListener('resize', sendResolutionToUnity);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!lastAction || !lastActionValue || !unityContext) {\n\t\t\treturn;\n\t\t}\n\t\tunityContext.send(\n\t\t\t'CarConfigManager',\n\t\t\t'ChangeConfiguration',\n\t\t\t`Change${capitalize(lastAction)}:${lastActionValue}`);\n\t}, [unityContext, lastAction, lastActionValue]);\n\n\tuseEffect(() => {\n\t\tsendResolutionToUnity();\n\t}, [sendResolutionToUnity]);\n\n\tuseEffect(() => {\n\t\tif (car) {\n\t\t\tchangeConfiguration('car', car);\n\t\t}\n\t}, [car, changeConfiguration]);\n\n\tuseEffect(() => {\n\t\tif (rim) {\n\t\t\tchangeConfiguration('rim', rim);\n\t\t}\n\t}, [rim, changeConfiguration]);\n\n\tuseEffect(() => {\n\t\tif (paint) {\n\t\t\tchangeConfiguration('paint', paint);\n\t\t}\n\t}, [paint, changeConfiguration]);\n\n\tconst capitalize = (text: string): string => {\n\t\treturn text.charAt(0).toUpperCase() + text.slice(1);\n\t};\n\n\tconst renderMenuContent = (): ReactNode => {\n\t\treturn <>\n\t\t\t<ul>\n\t\t\t\t{renderTabs()}\n\t\t\t</ul>\n\t\t\t<ul className=\"menu-options-wrapper\">\n\t\t\t\t{renderOptions()}\n\t\t\t</ul>\n\t\t</>;\n\t};\n\n\tconst renderTabs = () => {\n\t\treturn Object.keys(CONFIGURATION_OPTIONS).map((tab) => {\n\t\t\treturn <li\n\t\t\t\tclassName={classnames('menu-tab', { 'active': tab === activeTab })}\n\t\t\t\tonClick={() => setActiveTab(tab as Tab)}\n\t\t\t\tkey={'tab-' + tab}\n\t\t\t>\n\t\t\t\t{capitalize(tab)}\n\t\t\t</li>;\n\t\t});\n\t};\n\n\tconst renderOptions = () => {\n\t\treturn CONFIGURATION_OPTIONS[activeTab].map((option) => {\n\t\t\treturn <li\n\t\t\t\tclassName=\"menu-option\"\n\t\t\t\tonClick={() => changeConfiguration(activeTab, option.value)}\n\t\t\t\tkey={'option-' + option.value}\n\t\t\t>\n\t\t\t\t<img src={option.image} alt={'option ' + option.value} />\n\t\t\t</li>;\n\t\t});\n\t};\n\n\tif (!unityContext) {\n\t\treturn null;\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Unity unityContext={unityContext} />\n\t\t\t<div className={classnames('collapsable-menu', { collapsed: isCollapsed })}>\n\t\t\t\t<div className=\"collapse-button\" onClick={toggleMenu} />\n\t\t\t\t<div className=\"collapse-wrapper\">{renderMenuContent()}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\Site\\src\\index.tsx",[],["26","27"],"C:\\Users\\Bert\\Documents\\repos\\CarConfiguratorShd\\Site\\src\\App.tsx",["28"],"import React, { ReactNode, useCallback, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport Unity, { UnityContext } from 'react-unity-webgl';\n\nimport ElantraF from './assets/car/ElantraF.png';\nimport TwoCv from './assets/car/2Cv.png';\n\nimport OldStyle from './assets/rim/OldStyle.png';\nimport FiveSpiked from './assets/rim/FiveSpiked.png';\nimport MomoRevenge from './assets/rim/MomoRevenge.png';\nimport JeepWrangler from './assets/rim/JeepWrangler.png';\n\nimport CarPaintRed from './assets/paint/CarPaintRed.png';\nimport CarPaintBlack from './assets/paint/CarPaintBlack.png';\nimport CarPaintBlue from './assets/paint/CarPaintBlue.png';\nimport CarPaintPaleGreen from './assets/paint/CarPaintPaleGreen.png';\n\nimport './App.css';\nimport { StringParam, useQueryParam } from 'use-query-params';\n\ninterface OptionInfo {\n\tvalue: string;\n\timage: string;\n}\n\ntype Tab = 'car' | 'rim' | 'paint';\n\nconst CONFIGURATION_OPTIONS: Record<Tab, OptionInfo[]> = {\n\tcar: [\n\t\t{ value: 'ElantraF', image: ElantraF },\n\t\t{ value: '2Cv', image: TwoCv }\n\t],\n\trim: [\n\t\t{ value: 'OldStyle', image: OldStyle },\n\t\t{ value: 'FiveSpiked', image: FiveSpiked },\n\t\t{ value: 'MomoRevenge', image: MomoRevenge },\n\t\t{ value: 'JeepWrangler', image: JeepWrangler }\n\t],\n\tpaint: [\n\t\t{ value: 'CarPaintRed', image: CarPaintRed },\n\t\t{ value: 'CarPaintBlack', image: CarPaintBlack },\n\t\t{ value: 'CarPaintBlue', image: CarPaintBlue },\n\t\t{ value: 'CarPaintPaleGreen', image: CarPaintPaleGreen },\n\t],\n};\n\nfunction App() {\n\tconst [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n\tconst [activeTab, setActiveTab] = useState<Tab>('car');\n\tconst [lastAction, setLastAction] = useState<Tab | null>(null);\n\tconst [lastActionValue, setLastActionValue] = useState<string | null>(null);\n\tconst [unityContext, setUnityContext] = useState<UnityContext | null>(null);\n\tconst [isUnityReady, setIsUnityReady] = useState<boolean>(false);\n\n\t// Save car configuration to url\n\tconst [car, setCar] = useQueryParam('car', StringParam);\n\tconst [rim, setRim] = useQueryParam('rim', StringParam);\n\tconst [paint, setPaint] = useQueryParam('paint', StringParam);\n\n\tconst toggleMenu = () => {\n\t\tsetIsCollapsed((collapsed) => !collapsed);\n\t};\n\n\tconst updateConfigAccordingToUrlParam = useCallback(() => {\n\t\tif (car) {\n\t\t\tchangeConfiguration('car', car);\n\t\t}\n\t\tif (rim) {\n\t\t\tchangeConfiguration('rim', rim);\n\t\t}\n\t\tif (paint) {\n\t\t\tchangeConfiguration('paint', paint);\n\t\t}\n\t}, []);\n\n\tconst changeConfiguration = useCallback((action: Tab, value: string) => {\n\t\tsetLastAction(action);\n\t\tsetLastActionValue(value);\n\n\t\tswitch (action) {\n\t\t\tcase 'car':\n\t\t\t\tsetCar(value);\n\t\t\t\tbreak;\n\n\t\t\tcase 'rim':\n\t\t\t\tsetRim(value);\n\t\t\t\tbreak;\n\n\t\t\tcase 'paint':\n\t\t\t\tsetPaint(value);\n\t\t\t\tbreak;\n\t\t}\n\t}, [setLastAction, setLastActionValue, setCar, setRim, setPaint]);\n\n\t// Run once at startup\n\tuseEffect(() => {\n\t\t// Init unity\n\t\tconst context = new UnityContext({\n\t\t\tloaderUrl: \"game/Build/game.loader.js\",\n\t\t\tdataUrl: \"game/Build/game.data\",\n\t\t\tframeworkUrl: \"game/Build/game.framework.js\",\n\t\t\tcodeUrl: \"game/Build/game.wasm\",\n\t\t});\n\n\t\t// Let unity tell us when it is finished loading the CarConfigManager\n\t\tcontext.on(\"ReadyForCommands\", () => {\n\t\t\tconsole.log('received ReadyForCommands event from unity');\n\t\t\tsetIsUnityReady(true);\n\t\t\tupdateConfigAccordingToUrlParam();\n\t\t\t(document.getElementsByTagName('CANVAS')[0] as HTMLCanvasElement).style.opacity = '1';\n\t\t});\n\n\t\tsetUnityContext(context);\n\t}, [updateConfigAccordingToUrlParam]);\n\n\tuseEffect(() => {\n\t\tif (!lastAction || !lastActionValue || !unityContext || !isUnityReady) {\n\t\t\treturn;\n\t\t}\n\t\tunityContext.send(\n\t\t\t'CarConfigManager',\n\t\t\t'ChangeConfiguration',\n\t\t\t`Change${capitalize(lastAction)}:${lastActionValue}`);\n\t}, [unityContext, lastAction, lastActionValue, isUnityReady]);\n\n\tuseEffect(() => {\n\t\tif (car) {\n\t\t\tchangeConfiguration('car', car);\n\t\t}\n\t}, [car, changeConfiguration]);\n\n\tuseEffect(() => {\n\t\tif (rim) {\n\t\t\tchangeConfiguration('rim', rim);\n\t\t}\n\t}, [rim, changeConfiguration]);\n\n\tuseEffect(() => {\n\t\tif (paint) {\n\t\t\tchangeConfiguration('paint', paint);\n\t\t}\n\t}, [paint, changeConfiguration]);\n\n\tconst capitalize = (text: string): string => {\n\t\treturn text.charAt(0).toUpperCase() + text.slice(1);\n\t};\n\n\tconst renderMenuContent = (): ReactNode => {\n\t\treturn <>\n\t\t\t<ul>\n\t\t\t\t{renderTabs()}\n\t\t\t</ul>\n\t\t\t<ul className=\"menu-options-wrapper\">\n\t\t\t\t{renderOptions()}\n\t\t\t</ul>\n\t\t</>;\n\t};\n\n\tconst renderTabs = () => {\n\t\treturn Object.keys(CONFIGURATION_OPTIONS).map((tab) => {\n\t\t\treturn <li\n\t\t\t\tclassName={classnames('menu-tab', { 'active': tab === activeTab })}\n\t\t\t\tonClick={() => setActiveTab(tab as Tab)}\n\t\t\t\tkey={'tab-' + tab}\n\t\t\t>\n\t\t\t\t{capitalize(tab)}\n\t\t\t</li>;\n\t\t});\n\t};\n\n\tconst renderOptions = () => {\n\t\treturn CONFIGURATION_OPTIONS[activeTab].map((option) => {\n\t\t\treturn <li\n\t\t\t\tclassName=\"menu-option\"\n\t\t\t\tonClick={() => changeConfiguration(activeTab, option.value)}\n\t\t\t\tkey={'option-' + option.value}\n\t\t\t>\n\t\t\t\t<img src={option.image} alt={'option ' + option.value} />\n\t\t\t</li>;\n\t\t});\n\t};\n\n\tif (!unityContext) {\n\t\treturn null;\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Unity unityContext={unityContext} />\n\t\t\t<div className={classnames('collapsable-menu', { collapsed: isCollapsed })}>\n\t\t\t\t<div className=\"collapse-button\" onClick={toggleMenu} />\n\t\t\t\t<div className=\"collapse-wrapper\">{renderMenuContent()}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":114,"column":5,"nodeType":"35","endLine":114,"endColumn":7,"suggestions":"36"},{"ruleId":"29","replacedBy":"37"},{"ruleId":"31","replacedBy":"38"},{"ruleId":"33","severity":1,"message":"39","line":74,"column":5,"nodeType":"35","endLine":74,"endColumn":7,"suggestions":"40"},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'car', 'changeConfiguration', 'paint', 'rim', and 'sendResolutionToUnity'. Either include them or remove the dependency array.","ArrayExpression",["43"],["41"],["42"],"React Hook useCallback has missing dependencies: 'car', 'changeConfiguration', 'paint', and 'rim'. Either include them or remove the dependency array.",["44"],"no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},{"desc":"47","fix":"48"},"Update the dependencies array to be: [car, changeConfiguration, paint, rim, sendResolutionToUnity]",{"range":"49","text":"50"},"Update the dependencies array to be: [car, changeConfiguration, paint, rim]",{"range":"51","text":"52"},[3149,3151],"[car, changeConfiguration, paint, rim, sendResolutionToUnity]",[2434,2436],"[car, changeConfiguration, paint, rim]"]